<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
    <title>Seb's Blog: RSS feed for tag: hack_of_the_day</title>
    <description></description>
    <link>http://seb.mondet.org/blog/</link>
    <lastBuildDate>Wed, 17 Aug 2011 21:13:07 +0200</lastBuildDate>
    <pubDate>Wed, 17 Aug 2011 21:13:07 +0200</pubDate>
    <item>
         <title>Hack Of The Day: PDF Versions And Printers</title>
         <description>&lt;div class="p"&gt;&lt;b&gt;The Problem:&lt;/b&gt; &lt;br/&gt;
 Your PDF file looks awsome on screen, but once you send it to your printer: 
&lt;ul&gt;
 &lt;li&gt; some UTF-8 characters are wrong, &lt;/li&gt;
&lt;li&gt; some vectorial drawings with transparency get wrong colors, or &lt;/li&gt;
&lt;li&gt; other figures get out of their bounding-boxes. &lt;/li&gt;
&lt;/ul&gt;
 I did a few experiments with a bunch of printers I have access to.  It seems that some of them simply do not handle the version 1.4 of the PDF &lt;i&gt;standard&lt;/i&gt; (which is, 10 damn' years old, also the basis for the &lt;a href="http://en.wikipedia.org/wiki/PDF/A"&gt;ISO 19005-1:2005&lt;/a&gt; standard, and of course  the version used by PDFLaTeX, XeLaTeX, Inkscape&amp;nbsp;&amp;hellip;).  &lt;/div&gt;
&lt;div class="p"&gt; &lt;b&gt;The Solution:&lt;/b&gt; &lt;br/&gt;
 Just use &lt;i&gt;Ghostscript&lt;/i&gt; to convert to PDF 1.2: &lt;pre&gt;
gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.2 \
  -dNOPAUSE -dQUIET -dBATCH
  -sOutputFile=FILE_OUT.pdf FILE_IN.pdf
&lt;/pre&gt; Or, if you think you're going to need it often: &lt;pre&gt;
pdfto12 () {
    if [ $# -ne 2 ]; then
        echo "usage: pdfto12 &amp;lt;pdf-in&amp;gt; &amp;lt;pdf-out&amp;gt;"
        return
    fi
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.2  \
       -dNOPAUSE -dQUIET -dBATCH -sOutputFile=$2 $1
}
&lt;/pre&gt;  &lt;/div&gt;
</description>
         <link>http://seb.mondet.org/blog/post/hack-of-the-day-pdf-versions-and-printers.html</link>
         <guid>http://seb.mondet.org/blog/post/hack-of-the-day-pdf-versions-and-printers.html</guid>
         <pubDate>Mon, 18 Apr 2011 15:25:42 +0200</pubDate>
     </item>


    <item>
         <title>Anyweb, Document Source Code The Way You Like</title>
         <description>&lt;div class="p"&gt;  I was playing with Adam Chlipala's &amp;ldquo;&lt;a href="http://adam.chlipala.net/cpdt/"&gt;CPDT&lt;/a&gt;&amp;rdquo; book and I wanted to take notes on some notations. I also wanted to do it in a &lt;a href="http://en.wikipedia.org/wiki/Literate_programming"&gt;&lt;i&gt;Literate Programming&lt;/i&gt;&lt;/a&gt; way: in a &lt;tt&gt;.v&lt;/tt&gt; Coq file with  &lt;a href="http://bracetax.berlios.de/"&gt;a familiar and practical syntax&lt;/a&gt;&amp;nbsp;&amp;hellip; &lt;/div&gt;
&lt;div class="p"&gt;  That's where  &lt;a href="http://seb.mondet.org/anyweb/"&gt;Anyweb&lt;/a&gt; comes into play. &lt;/div&gt;
&lt;div class="p"&gt;  This one-day hack is a simple parser and printer which looks for special string-markers (like &lt;tt&gt;(*B&lt;/tt&gt; and &lt;tt&gt;B*)&lt;/tt&gt; in Coq or OCaml sources) and does &lt;i&gt;stuff&lt;/i&gt; (like calling &lt;tt&gt;coqdoc&lt;/tt&gt; or &lt;tt&gt;source-highlight&lt;/tt&gt;) depending on where it is in the source. The transformer uses an automaton and a stack, so any kind of &lt;i&gt;recursive&lt;/i&gt; embedding seems possible. &lt;/div&gt;
&lt;div class="p"&gt;  The &lt;a href="https://github.com/smondet/anyweb/blob/master/anyweb.ml"&gt;code&lt;/a&gt; is &lt;i&gt;of course&lt;/i&gt; self-documenting (&lt;a href="http://seb.mondet.org/anyweb/"&gt;HTML&lt;/a&gt;, or &lt;a href="http://seb.mondet.org/anyweb/anyweb.pdf"&gt;PDF&lt;/a&gt;). The bunch of notes on CPDT which motivated the hack is also &lt;a href="https://github.com/smondet/anyweb/blob/master/subset_notes.v"&gt;available&lt;/a&gt; (&lt;a href="http://seb.mondet.org/anyweb/coq_example.html"&gt;HTML&lt;/a&gt;, and &lt;a href="http://seb.mondet.org/anyweb/coq_example.pdf"&gt;PDF&lt;/a&gt;).  &lt;/div&gt;
</description>
         <link>http://seb.mondet.org/blog/post/anyweb-document-source-code-the-way-you-like.html</link>
         <guid>http://seb.mondet.org/blog/post/anyweb-document-source-code-the-way-you-like.html</guid>
         <pubDate>Tue, 19 Apr 2011 21:26:42 +0200</pubDate>
     </item>


    <item>
         <title>Taking (MIDI) Notes With Your Guitar</title>
         <description>&lt;div class="p"&gt; I always thought it required a lot of signal processing black magic and many hours spent setting up mysterious knobs to get the conversion of any piece of sound to an &lt;i&gt;acceptable&lt;/i&gt; stream of MIDI events. &lt;/div&gt;
&lt;div class="p"&gt;  Well&amp;nbsp;&amp;hellip; I guess I was right&amp;nbsp;&amp;hellip; but, if we relax the constraint on the meaning of &amp;lsquo;&lt;i&gt;acceptable&lt;/i&gt;&amp;rsquo;, we can maybe work something useful out. &lt;/div&gt;
&lt;div class="p"&gt;  Actually, we can  quite easily use a guitar to &lt;i&gt;&amp;lsquo;take notes&amp;rsquo;&lt;/i&gt; of some piece of melody. Indeed, I just discovered &lt;a href="http://rakarrack.sourceforge.net/"&gt;Rakarrack&lt;/a&gt; which has an extremely simple Guitar-to-MIDI converter. From there, the steps are easy (all software used here is in Debian and Ubuntu's APT): 
&lt;ul&gt;
 &lt;li&gt; connect your guitar to Rakarrack (for example using &lt;a href="http://qjackctl.sourceforge.net"&gt;QJackCtl&lt;/a&gt; in the figure&amp;nbsp;&lt;a href="#img:audio_connections"&gt;img:audio_connections&lt;/a&gt;); &lt;/li&gt;
&lt;li&gt; connect Rakarrack's MIDI output to a MIDI recorder (I used &lt;a href="http://www.rosegardenmusic.com"&gt;Rosegarden&lt;/a&gt;), c.f. the figure&amp;nbsp;&lt;a href="#img:midi_connections"&gt;img:midi_connections&lt;/a&gt;; &lt;/li&gt;
&lt;li&gt; &lt;i&gt;push&lt;/i&gt; Rakarrack's settings &lt;i&gt;to eleven&lt;/i&gt; as in the figure&amp;nbsp;&lt;a href="#img:rakarrack_midi"&gt;img:rakarrack_midi&lt;/a&gt;; &lt;/li&gt;
&lt;li&gt; press record in Rosegarden and try to play. &lt;/li&gt;
&lt;/ul&gt;
 One can only play a single note at a time, &lt;i&gt;strictly&lt;/i&gt;, and the audio-to-MIDI conversion adds &lt;i&gt;a lot&lt;/i&gt; of random delay. But after a few attempts, it is possible to &lt;i&gt;take notes&lt;/i&gt;. Maybe the reader can recognise a piece of the most famous Norwegian melody in the figure &lt;a href="#img:rosegarden"&gt;img:rosegarden&lt;/a&gt;.  
&lt;div class="figure" id="img:audio_connections" &gt;
  &lt;a href="https://lh5.googleusercontent.com/_50sOZh_gXI8/TbdBWMbNliI/AAAAAAAACEo/ilkr6Kgg1G4/s400/audio_connections.png"&gt;
    &lt;img src="https://lh5.googleusercontent.com/_50sOZh_gXI8/TbdBWMbNliI/AAAAAAAACEo/ilkr6Kgg1G4/s400/audio_connections.png" width="60%" id="img:audio_connections"  alt="https://lh5.googleusercontent.com/_50sOZh_gXI8/TbdBWMbNliI/AAAAAAAACEo/ilkr6Kgg1G4/s400/audio_connections.png"/&gt;
  &lt;/a&gt;&lt;br/&gt;
The Audio Connections In QJackCtl&lt;/div&gt;  
&lt;div class="figure" id="img:midi_connections" &gt;
  &lt;a href="https://lh5.googleusercontent.com/_50sOZh_gXI8/TbdBWAqhgoI/AAAAAAAACEs/dIxWdGCGvFw/s400/midi_connections.png"&gt;
    &lt;img src="https://lh5.googleusercontent.com/_50sOZh_gXI8/TbdBWAqhgoI/AAAAAAAACEs/dIxWdGCGvFw/s400/midi_connections.png" width="60%" id="img:midi_connections"  alt="https://lh5.googleusercontent.com/_50sOZh_gXI8/TbdBWAqhgoI/AAAAAAAACEs/dIxWdGCGvFw/s400/midi_connections.png"/&gt;
  &lt;/a&gt;&lt;br/&gt;
The (Alsa) MIDI Connections In QJackCtl&lt;/div&gt;  
&lt;div class="figure" id="img:rakarrack_midi" &gt;
  &lt;a href="https://lh4.googleusercontent.com/_50sOZh_gXI8/Tbc1czZpyXI/AAAAAAAACEM/JjyckjkfZvM/s800/rakarrack.png"&gt;
    &lt;img src="https://lh4.googleusercontent.com/_50sOZh_gXI8/Tbc1czZpyXI/AAAAAAAACEM/JjyckjkfZvM/s800/rakarrack.png" width="40%" id="img:rakarrack_midi"  alt="https://lh4.googleusercontent.com/_50sOZh_gXI8/Tbc1czZpyXI/AAAAAAAACEM/JjyckjkfZvM/s800/rakarrack.png"/&gt;
  &lt;/a&gt;&lt;br/&gt;
Settings For Rakarrack&lt;/div&gt;  
&lt;div class="figure" id="img:rosegarden" &gt;
  &lt;a href="https://lh5.googleusercontent.com/_50sOZh_gXI8/Tbc1dYakv5I/AAAAAAAACEQ/oHOkZKz10yU/s400/rosegarden_part.png"&gt;
    &lt;img src="https://lh5.googleusercontent.com/_50sOZh_gXI8/Tbc1dYakv5I/AAAAAAAACEQ/oHOkZKz10yU/s400/rosegarden_part.png" width="60%" id="img:rosegarden"  alt="https://lh5.googleusercontent.com/_50sOZh_gXI8/Tbc1dYakv5I/AAAAAAAACEQ/oHOkZKz10yU/s400/rosegarden_part.png"/&gt;
  &lt;/a&gt;&lt;br/&gt;
What We Can Get In Rosegarden&lt;/div&gt;  &lt;/div&gt;
</description>
         <link>http://seb.mondet.org/blog/post/taking-midi-notes.html</link>
         <guid>http://seb.mondet.org/blog/post/taking-midi-notes.html</guid>
         <pubDate>Fri, 29 Apr 2011 11:34:41 +0200</pubDate>
     </item>


    <item>
         <title>Vim-like Leader Keys In Emacs</title>
         <description>&lt;div class="p"&gt;&lt;/div&gt;
&lt;h4 id="The_Problem"&gt;The Problem&lt;/h4&gt;
&lt;div class="p"&gt;  We want an equivalent of Vim's &lt;tt&gt;Leader&lt;/tt&gt; keys  (c.f. &lt;a href="http://stackoverflow.com/questions/1764263/what-is-the-leader-in-a-vimrc-file"&gt;this stackoverflow question&lt;/a&gt;) for our own key-bindings. In other words, we want to prefix all the defined shortcuts with a given key-binding in order not to mess too much with Emacs or with modes implemented by other people. We also want to make it easy to define new keys, for functions or for any piece of code, and we want to be able to easily change the &lt;tt&gt;Leader&lt;/tt&gt; key.  &lt;/div&gt;
&lt;h4 id="The_Current_Solution"&gt;The Current Solution&lt;/h4&gt;
&lt;div class="p"&gt;  In your &lt;tt&gt;.emacs&lt;/tt&gt; file, before all the nasty hacks that you want to prefix, the idea is first to define a new &amp;ldquo;keymap&amp;rdquo; for your bindings. It is called &lt;tt&gt;dkeys&lt;/tt&gt; for no particular reason here: &lt;pre&gt;
(setq dkeys-map (make-sparse-keymap))
&lt;/pre&gt; Then we choose one arbitrary leading key, here &lt;tt&gt;Ctrl-D&lt;/tt&gt;&lt;small class="notebegin"&gt;(&lt;/small&gt;&lt;small class="note"&gt;I use the &lt;a href="http://ergoemacs.org/"&gt;ErgoEmacs&lt;/a&gt;' and &lt;a href="http://www.emacswiki.org/CuaMode"&gt;CUA&lt;/a&gt; modes, so &lt;tt&gt;Ctrl-D&lt;/tt&gt; is unused in my setup.&lt;/small&gt;&lt;small class="noteend"&gt;)&lt;/small&gt;, but any combination of keystrokes may be used. The &lt;tt&gt;global-unset-key&lt;/tt&gt; should be applied only to the first of the string: &lt;pre&gt;
(setq dkeys-leading-key "\C-d")
(global-unset-key "\C-d")
&lt;/pre&gt; &lt;/div&gt;
&lt;div class="p"&gt;  To be &amp;ldquo;clean&amp;rdquo;, we define a minor mode, and activate it&lt;small class="notebegin"&gt;(&lt;/small&gt;&lt;small class="note"&gt;the minor mode is actually not mandatory but this way you can define many different ones, and activate them on-demand.&lt;/small&gt;&lt;small class="noteend"&gt;)&lt;/small&gt;: &lt;pre&gt;
(define-minor-mode dkeys-mode
  "C-d-Keys mode"
  :lighter " Dkey"
  :global t
  :keymap dkeys-map)
(dkeys-mode 1)
&lt;/pre&gt; &lt;/div&gt;
&lt;div class="p"&gt;  To simplify key-bindings we create a function to bind a key-sequence to a function: &lt;pre&gt;
(defun set-dkey(key function)
  (define-key dkeys-map 
              (concat dkeys-leading-key key)
              function))
&lt;/pre&gt; The function just adds the &lt;tt&gt;Leader&lt;/tt&gt;, and defines the key-binding in the minor mode. &lt;/div&gt;
&lt;div class="p"&gt;  As we are lazy, we define a macro&lt;small class="notebegin"&gt;(&lt;/small&gt;&lt;small class="note"&gt;When hacking macros you might want to use the &lt;tt&gt;macroexpand&lt;/tt&gt; function &lt;a href="http://www.gnu.org/software/emacs/elisp/html_node/Expansion.html"&gt;to solve some headaches&lt;/a&gt;.&lt;/small&gt;&lt;small class="noteend"&gt;)&lt;/small&gt; which defines &lt;i&gt;interactive&lt;/i&gt; functions, and binds them to the keys at once: &lt;pre&gt;
(defmacro dkeys-funkey (key name function)
  (list
   'progn
   (list 'defun name '()
     '(interactive) function)
   (list 'define-key 'dkeys-map 
     (list 'concat 'dkeys-leading-key key) 
     (list 'quote name))))
&lt;/pre&gt; &lt;/div&gt;
&lt;div class="p"&gt;  Finally, each definition can be simply added to that minor mode. For example, this &lt;i&gt;key-bound-function&lt;/i&gt;, inserts some text when &lt;tt&gt;"C-d o o"&lt;/tt&gt; is typed: &lt;pre&gt;
(dkeys-funkey "oo" express-astonishment
            (progn
              (insert "oooooohhhh!!!")))
&lt;/pre&gt; &lt;/div&gt;
&lt;div class="p"&gt;  That's it. Happy Emacs Hacking!  &lt;/div&gt;
</description>
         <link>http://seb.mondet.org/blog/post/emacs-vim-like-leader.html</link>
         <guid>http://seb.mondet.org/blog/post/emacs-vim-like-leader.html</guid>
         <pubDate>Wed, 04 May 2011 13:18:02 +0200</pubDate>
     </item>


    <item>
         <title>Quick And Dirty Web-Slides</title>
         <description>&lt;div class="p"&gt; Today's quick and dirty hack is about putting your presentation on-line as a list of images so that anyone can quickly see it without downloading the PDF. &lt;/div&gt;
&lt;div class="p"&gt;  First, be sure you start from something &amp;ldquo;clean&amp;rdquo;: &lt;pre&gt;
rm -fr slides/
mkdir -p slides/
&lt;/pre&gt; Then, use &lt;a href="http://www.imagemagick.org/"&gt;ImageMagick&lt;/a&gt; to convert your slides into images: &lt;pre&gt;
convert -density 200 Presentation.pdf \
    -resize 500x -quality 80 +adjoin slides/slide.png
&lt;/pre&gt; It creates numbered files &lt;tt&gt;slide-0.png&lt;/tt&gt;,&amp;nbsp;&amp;hellip; &lt;tt&gt;slide-42.png&lt;/tt&gt;. So we just create an HTML file containing all the images:  &lt;pre&gt;
nb=`\ls -1 --color=none slides/*.png | wc -l`
echo "&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;" &amp;gt; slides/index.html
for i in `seq 0 $[$nb - 1]` ; do
    echo "&amp;lt;img src=\"slide-$i.png\" /&amp;gt;" &amp;gt;&amp;gt; slides/index.html
done
echo "&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;" &amp;gt;&amp;gt; slides/index.html
&lt;/pre&gt; Here is an example (my latest talk): &lt;a href="http://smondet.at.ifi.uio.no/resources/Promiwag_SMondet_IFIPSec11.pdf"&gt;PDF&lt;/a&gt;, &lt;a href="http://smondet.at.ifi.uio.no/resources/Promiwag_SMondet_IFIPSec11/"&gt;HTML/PNG&lt;/a&gt;. &lt;/div&gt;
&lt;div class="p"&gt;  Adding the verbose &lt;tt&gt;DOCTYPE&lt;/tt&gt; stuff is left as exercise&amp;nbsp;&amp;hellip; ;) &lt;/div&gt;
&lt;div class="p"&gt;  &lt;/div&gt;
</description>
         <link>http://seb.mondet.org/blog/post/qad-slides-webpage.html</link>
         <guid>http://seb.mondet.org/blog/post/qad-slides-webpage.html</guid>
         <pubDate>Mon, 13 Jun 2011 15:16:47 +0200</pubDate>
     </item>
</channel>
</rss>
