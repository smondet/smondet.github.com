<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
    <title>Seb's Blog: RSS feed for tag: meta</title>
    <description></description>
    <link>http://seb.mondet.org/blog/</link>
    <lastBuildDate>Mon, 13 Jun 2011 15:17:01 +0200</lastBuildDate>
    <pubDate>Mon, 13 Jun 2011 15:17:01 +0200</pubDate>
    <item>
         <title>Third Post; New Blog Engine</title>
         <description>&lt;div class="p"&gt; I got quickly annoyed by Wordpress' interface, and by the engine itself,  and by those ugly themes, and&amp;nbsp;&amp;hellip; OK, let's stop bad-mouthing other people&amp;nbsp;&amp;hellip; &lt;/div&gt;
&lt;div class="p"&gt;  &lt;blockquote&gt;&lt;div class="p"&gt;&lt;i&gt;&amp;lsquo;On n'est jamais mieux servi que par soi-mÃªme &lt;a href="http://forum.wordreference.com/showthread.php?t=263500"&gt;&amp;hellip;&lt;/a&gt;&amp;rsquo;&lt;/i&gt;&lt;/div&gt;&lt;/blockquote&gt; &lt;/div&gt;
&lt;div class="p"&gt;  I added a &lt;tt&gt;Blog&lt;/tt&gt; module to &lt;a href="https://github.com/smondet/dibrawi"&gt;Dibrawi&lt;/a&gt;'s helper interface for &lt;a href="http://martin.jambon.free.fr/camlmix/"&gt;Camlmix&lt;/a&gt;. Let's say &lt;i&gt;Dibrawi&lt;/i&gt; is a Wiki engine &lt;i&gt;under heavy development&lt;/i&gt;, based on  the &lt;a href="http://bracetax.berlios.de/"&gt;Bracetax&lt;/a&gt; syntax, bibliography management with &lt;a href="http://sebib.forge.ocamlcore.org/"&gt;Sebib&lt;/a&gt;, and other stuff (e.g. an address book).  It has a &lt;i&gt;wiki&lt;/i&gt; default running mode, which only converts the wiki pages, the bibliography, and the address book to HTML. The &lt;i&gt;wiki&lt;/i&gt; mode is fast and &lt;i&gt;seems&lt;/i&gt; secure&lt;small class="notebegin"&gt;(&lt;/small&gt;&lt;small class="note"&gt;or at least it is more secure than any other wiki engine I know&amp;nbsp;&amp;hellip;&lt;/small&gt;&lt;small class="noteend"&gt;)&lt;/small&gt;. On the other hand, each page can be &lt;i&gt;preprocessed&lt;/i&gt; separately (locally, on command line) while activating OCaml code (&lt;i&gt;Camlmix&lt;/i&gt;). This code will be compiled and run to generate whatever the user wants (like a  &lt;a href="http://seb.mondet.org"&gt;web site&lt;/a&gt;, or a &lt;a href="http://seb.mondet.org/CV_SebastienMONDET.pdf"&gt;PDF&lt;/a&gt;). In &lt;i&gt;wiki&lt;/i&gt; mode, the OCaml code is just displayed as &lt;tt&gt;code&lt;/tt&gt; or ignored. &lt;/div&gt;
&lt;div class="p"&gt;  Henceforth, this new blog engine is a nice occasion to start showing some of the ideas behind &lt;i&gt;Dibrawi&lt;/i&gt;. With some OCaml code one can quickly and easily generate a static blog (which uses &lt;a href="http://disqus.com/"&gt;Disqus&lt;/a&gt; as comment system). The bunch of HTML files together with the RSS feeds can be uploaded to any hosting facility (like &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt;&amp;nbsp;&lt;tt&gt;;&amp;#150;)&lt;/tt&gt;). &lt;/div&gt;
&lt;div class="p"&gt;  The idea is to play with the  &lt;a href="https://github.com/smondet/dibrawi/blob/f38296ac3b6b7fa168ac38c4baec7e0e24b387ba/src/lib/dibrawi_mix.ml#L782"&gt;&lt;tt&gt;Blog&lt;/tt&gt; module&lt;/a&gt;'s functions (and the rest of the &lt;tt&gt;dibrawi&lt;/tt&gt; library) to generate a full blog. Here is a full example: 
&lt;ul&gt;
 &lt;li&gt;  &lt;a href="https://github.com/smondet/dibrawi/blob/master/doc/examples/Blog.brtx"&gt;&lt;b&gt;The file &lt;tt&gt;Blog.brtx&lt;/tt&gt;&lt;/b&gt;&lt;/a&gt;: We see the &lt;i&gt;tags&lt;/i&gt; &lt;tt&gt;{mix:code}&lt;/tt&gt;, &lt;tt&gt;{mix:ignore}&lt;/tt&gt; and &lt;tt&gt;{mix:end}&lt;/tt&gt;  which are the &lt;i&gt;main&lt;/i&gt; escape commands to put OCaml code within &lt;i&gt;Dibrawi&lt;/i&gt; (replacing the &amp;ldquo;&lt;tt&gt;##&lt;/tt&gt;&amp;rdquo; family in Camlmix).  &lt;/li&gt;
&lt;li&gt;  &lt;a href="http://seb.mondet.org/dibrawi/wiki/examples/Blog.html"&gt;&lt;b&gt;The &lt;i&gt;wiki&lt;/i&gt; mode version&lt;/b&gt;&lt;/a&gt; displays the OCaml code which used &lt;tt&gt;{mix:code}&lt;/tt&gt;. &lt;/li&gt;
&lt;li&gt; &lt;a href="http://seb.mondet.org/dibrawi/blog/"&gt;&lt;b&gt;The blog&lt;/b&gt;&lt;/a&gt; (HTML and RSS files) is generated by the code  at the end of the source. &lt;/li&gt;
&lt;/ul&gt;
 &lt;/div&gt;
&lt;div class="p"&gt; Once the framework is set up, each new blog post is just some text enclosed between &lt;tt&gt;blog#new_post&lt;/tt&gt; and &lt;tt&gt;blog#end_post&lt;/tt&gt; calls, e.g.:   &lt;pre&gt;
{mix:code} blog#new_post 
  ~title:"Anyweb, Document Source Code The Way You Like"
  ~date:"Tue, 19 Apr 2011 21:26:42 +0200"
  ~tags:[ "hack_of_the_day"; "anyweb"; "coq"; "ocaml" ]
  "anyweb-document-source-code-the-way-you-like"
{mix:end}
 
I was playing with Adam Chlipala's
{q|{link http://adam.chlipala.net/cpdt/ |CPDT}} book
and I wanted to take notes on some notations.
I also wanted to do it in a
 
  # Quite a lot of text ... 
 
{mix:code} blog#end_post {mix:end}
&lt;/pre&gt;    &lt;/div&gt;
&lt;div class="p"&gt;   Each time, generating the blog is as simple as calling &lt;tt&gt;dbw&lt;/tt&gt; with  the &lt;tt&gt;run&lt;/tt&gt; command: &lt;pre&gt;
dbw run path/to/Blog.brtx 
&lt;/pre&gt; and that's all for today folks!  &lt;/div&gt;
</description>
         <link>http://seb.mondet.org/blog/post/third-post-new-blog-engine.html</link>
         <guid>http://seb.mondet.org/blog/post/third-post-new-blog-engine.html</guid>
         <pubDate>Tue, 26 Apr 2011 09:28:20 +0200</pubDate>
     </item>
</channel>
</rss>
